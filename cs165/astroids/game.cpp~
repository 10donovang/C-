/*********************************************************************
 * File: game.cpp
 * Description: Contains the implementaiton of the game class
 *  methods.
 *
 *********************************************************************/

#include "game.h"

#include "uiDraw.h"
#include "uiInteract.h"
#include "point.h"
#include "ship.h"
#include "rocks.h"
#include <vector>
#include <iostream>
using namespace std;
#define OFF_SCREEN_BORDER_AMOUNT 5


// These are needed for the getClosestDistance function...
#include <limits>
#include <algorithm>
using namespace std;

/***************************************
 * GAME CONSTRUCTOR
 ***************************************/
Game :: Game(Point tl, Point br)
 : topLeft(tl), bottomRight(br)
{
  
   // Set up the initial conditions of the game
   score = 0;

   // TODO: Set your object pointer to a good initial value (e.g., NULL)
 

 
   for (int i = 0; i < 5; i++)
     rocks.push_back(new BigRock);
  
}

/****************************************
 * GAME DESTRUCTOR
 ****************************************/
Game :: ~Game()
{
  bullets.clear();
  rocks.clear();
  
}

/***************************************
 * GAME :: ADVANCE
 * advance the game one unit of time
 ***************************************/
void Game :: advance()
{
  advanceFlyingObjects();
  handleCollisions();
  cleanUpZombies();
}

/**********************************************************
 * Function: getClosestDistance
 * Description: Determine how close these two objects will
 *   get in between the frames.
 **********************************************************/
template <class T>
float Game :: getClosestDistance(FlyingObject *obj1, const T &obj2) const
{
   // find the maximum distance traveled
   float dMax = max(abs(obj1->getVelocity().getDx()), abs(obj1->getVelocity().getDy()));
   dMax = max(dMax, abs(obj2.getVelocity().getDx()));
   dMax = max(dMax, abs(obj2.getVelocity().getDy()));
   dMax = max(dMax, 0.1f); // when dx and dy are 0.0. Go through the loop once.
   
   float distMin = std::numeric_limits<float>::max();
   for (float i = 0.0; i <= dMax; i++)
   {
      Point point1(obj1->getPoint().getX() + (obj1->getVelocity().getDx() * i / dMax),
                     obj1->getPoint().getY() + (obj1->getVelocity().getDy() * i / dMax));
      Point point2(obj2.getPoint().getX() + (obj2.getVelocity().getDx() * i / dMax),
                     obj2.getPoint().getY() + (obj2.getVelocity().getDy() * i / dMax));
      
      float xDiff = point1.getX() - point2.getX();
      float yDiff = point1.getY() - point2.getY();
      
      float distSquared = (xDiff * xDiff) +(yDiff * yDiff);
      
      distMin = min(distMin, distSquared);
   }
   
   return sqrt(distMin);
}

/***************************************
 * GAME :: ADVANCE BULLETS
 * Go through each bullet and advance it.
 ***************************************/
void Game :: advanceFlyingObjects()
{
  int rockCount = 0;
   // Move each of the bullets forward if it is alive
   for (int i = 0; i < rocks.size(); i++)
   {
      if (rocks[i] != NULL && rocks[i]->isAlive())
      {
         // this rock is alive, so tell it to move forward
         rocks[i]->advance();
      }
      else
	{
	  rockCount++;
	}
      if(rockCount == 40)
	{
	 for (int i = 0; i < 5; i++)
	   rocks.push_back(new BigRock);
	 rockCount++;
	 for(int i = 0; i < rocks.size(); i++)
	   {
	     if(ship.getPoint().getY() == rocks[i]->getPoint().getY()
		&& ship.getPoint().getX() == rocks[i]->getPoint().getX())
	       {
		 int y = random(-200, 200);
		 int x = random(-200, 200);
		 Point newPosistion(x, y);
		 rocks[i]->setPoint(newPosistion);
	       }
	   }
	}
   
   }
   
   if (ship.isAlive())
     ship.advance();

   for(int i = 0;  i  < bullets.size(); i++)
     {
       if(bullets[i].getCount() >= BULLET_LIFE)
	 bullets[i].hit();
       if(bullets[i].isAlive())
	 {
	   bullets[i].advance();
	 }
     }
  
}



/**************************************************************************
 * GAME :: HANDLE COLLISIONS
 * Check for a collision between everything
 **************************************************************************/
void Game :: handleCollisions()
{
   // now check for a hit (if it is close enough to any live bullets)
   for (int i = 0; i < rocks.size(); i++)
   {
     for(int j = 0; j < bullets.size(); j++)
       if (rocks[i] != NULL && rocks[i]->isAlive())
      {
         // this bullet is alive, see if its too close

         // check if the bird is at this point (in case it was hit)
	if (bullets[j].isAlive())
         {
	   
            // BTW, this logic could be more sophisiticated, but this will
            // get the job done for now...
            if (fabs(rocks[i]->getPoint().getX() -
		     bullets[j].getPoint().getX()) < rocks[i]->size()
                && fabs(rocks[i]->getPoint().getY() -
			bullets[j].getPoint().getY()) < rocks[i]->size() ||
		getClosestDistance(rocks[i], bullets[j]) < rocks[i]->size())
            {
               //we have a hit!
               
              
               int points = rocks[i]->hit();
	       if(points == 1)
		 {
		   rocks.push_back(new MediumRock);
		   rocks[rocks.size()-1]->setPoint(rocks[i]->getPoint());
		   Velocity newSpeed(rocks[i]->getVelocity().getDx(), rocks[i]->getVelocity().getDy()+1);
		   rocks[rocks.size()-1]->setVelocity(newSpeed);
		    rocks.push_back(new MediumRock);
		   rocks[rocks.size()-1]->setPoint(rocks[i]->getPoint());
		   Velocity newSpeed1(rocks[i]->getVelocity().getDx(), rocks[i]->getVelocity().getDy()-1);
		   rocks[rocks.size()-1]->setVelocity(newSpeed1);
		   rocks.push_back(new SmallRock);
		   rocks[rocks.size()-1]->setPoint(rocks[i]->getPoint());
		   Velocity newSpeed2(rocks[i]->getVelocity().getDx()+2, rocks[i]->getVelocity().getDy());
		   rocks[rocks.size()-1]->setVelocity(newSpeed2);
		 }

	       else if(points == 3)
		 {
		   rocks.push_back(new SmallRock);
		   rocks[rocks.size()-1]->setPoint(rocks[i]->getPoint());
		   Velocity newSpeed(rocks[i]->getVelocity().getDx()+3, rocks[i]->getVelocity().getDy());
		   rocks[rocks.size()-1]->setVelocity(newSpeed);
		    rocks.push_back(new SmallRock);
		   rocks[rocks.size()-1]->setPoint(rocks[i]->getPoint());
		   Velocity newSpeed1(rocks[i]->getVelocity().getDx()-3, rocks[i]->getVelocity().getDy());
		   rocks[rocks.size()-1]->setVelocity(newSpeed1);
	         }
               score += points;
	     

	       points = bullets[j].hit();
               score += points;
               
            }
         }
      }
     
     for(int i = 0; i < rocks.size(); i++)
       {
	 if(rocks[i] != NULL && rocks[i]->isAlive())
	 {
	   if (fabs(rocks[i]->getPoint().getX() -
		    ship.getPoint().getX()) < rocks[i]->size()
	        && fabs(rocks[i]->getPoint().getY() -
			ship.getPoint().getY()) < rocks[i]->size()||
		getClosestDistance(rocks[i], ship) < rocks[i]->size())
	    {
	      int points = rocks[i]->hit();
	      score += points;

	      points = ship.hit();
	      score += points;
	    }
	 }
       }
   } 
}

/**************************************************************************
 * GAME :: CLEAN UP ZOMBIES
 * Remove any dead objects (take bullets out of the list, deallocate bird)
 **************************************************************************/
void Game :: cleanUpZombies()
{
  
  
   // Look for dead objects
   vector<Rock*>::iterator objectsIt = rocks.begin();
   while (objectsIt != rocks.end())
   {
     Rock * pobjects = *objectsIt;
      // Asteroids Hint:
      // If we had a list of pointers, we would need this line instead:
      //Bullet* pBullet = *bulletIt;
    
      if (!pobjects->isAlive())
      {
         // If we had a list of pointers, we would need to delete the memory here...
	delete []pobjects;
         
         // remove from list and advance
         objectsIt = rocks.erase(objectsIt);
      }
      else
      {
         objectsIt++; // advance
      }
   }

    vector<Bullet>::iterator bulletIt = bullets.begin();
   while (bulletIt != bullets.end())
   {
      Bullet  bullet = *bulletIt;
      // Asteroids Hint:
      // If we had a list of pointers, we would need this line instead:
      //Bullet* pBullet = *bulletIt;
      
      if (!bullet.isAlive())
      {
         // If we had a list of pointers, we would need to delete the memory here...

         
         // remove from list and advance
         bulletIt = bullets.erase(bulletIt);
      }
      else
      {
         bulletIt++; // advance
      }
   }
   
}

/***************************************
 * GAME :: HANDLE INPUT
 * accept input from the user
 ***************************************/
void Game :: handleInput(const Interface & ui)
{
   // Change the direction of the rifle
   if (ui.isLeft())
   {
     ship.moveLeft();
      
   }
   
   if (ui.isRight())
   {
     ship.moveRight();
   }

   if(ui.isUp())
     {
       ship.moveForward();
     }
   
   // Check for "Spacebar
   if (ui.isSpace())
   {
     if(ship.isAlive())
       {
	 Bullet bullet;
	 bullet.setPoint(ship.getPoint());
	 bullet.setAngle(ship.getAngle());
	 bullet.fire();
	 bullets.push_back(bullet);
       }
   }
}


/*********************************************
 * GAME :: DRAW
 * Draw everything on the screen
 *********************************************/
void Game :: draw(const Interface & ui)
{
   // draw the bullets, if they are alive
  for (int i = 0; i < rocks.size(); i++)
   {
     
      if (rocks[i] != NULL && rocks[i]->isAlive())
      {
         rocks[i]->draw();	 
      }
   }

  if(ship.isAlive())
    ship.draw();

  for(int i = 0; i < bullets.size(); i++)
    if (bullets[i].isAlive())
      {
	bullets[i].draw();
      }
  
   
   // Put the score on the screen
   Point scoreLocation;
   scoreLocation.setX(topLeft.getX() + 5);
   scoreLocation.setY(topLeft.getY() - 5);
   
   drawNumber(scoreLocation, score);
   

}
